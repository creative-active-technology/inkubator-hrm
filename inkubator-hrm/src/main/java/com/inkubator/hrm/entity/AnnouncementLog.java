package com.inkubator.hrm.entity;
// Generated Apr 6, 2015 2:16:23 PM by Hibernate Tools 4.3.1

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

/**
 * AnnouncementLog generated by hbm2java
 */
@Entity
@Table(name = "announcement_log", catalog = "hrm", uniqueConstraints = @UniqueConstraint(columnNames = {"announcement_id", "emp_data_id", "plan_execution_date"}))
public class AnnouncementLog implements java.io.Serializable {

    private long id;
    private Integer version;
    private Announcement announcement;
    private EmpData empData;
    private Boolean isAlreadyExecuted;
    private Date planExecutionDate;
    private Date executionDate;
    private Date createdOn;
    private String createdBy;
    private String updatedBy;
    private Date updatedOn;

    public AnnouncementLog() {
    }

    public AnnouncementLog(long id) {
        this.id = id;
    }

    @Id
    @Column(name = "id", unique = true, nullable = false)
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "announcement_log_seq_gen")
    @SequenceGenerator(name = "announcement_log_seq_gen", sequenceName = "ANNOUNCEMENT_LOG_SEQ")
    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @Version
    @Column(name = "version")
    public Integer getVersion() {
        return this.version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "announcement_id")
    public Announcement getAnnouncement() {
        return this.announcement;
    }

    public void setAnnouncement(Announcement announcement) {
        this.announcement = announcement;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "emp_data_id")
    public EmpData getEmpData() {
        return this.empData;
    }

    public void setEmpData(EmpData empData) {
        this.empData = empData;
    }

	@Column(name = "is_already_executed", nullable = false)
    public Boolean getIsAlreadyExecuted() {
		return isAlreadyExecuted;
	}

	public void setIsAlreadyExecuted(Boolean isAlreadyExecuted) {
		this.isAlreadyExecuted = isAlreadyExecuted;
	}	
	
	@Temporal(TemporalType.DATE)
    @Column(name = "plan_execution_date", length = 19, nullable =  false)
	public Date getPlanExecutionDate() {
		return planExecutionDate;
	}

	public void setPlanExecutionDate(Date planExecutionDate) {
		this.planExecutionDate = planExecutionDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
    @Column(name = "execution_date", length = 19)
	public Date getExecutionDate() {
		return executionDate;
	}

	public void setExecutionDate(Date executionDate) {
		this.executionDate = executionDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_on", length = 19)
    public Date getCreatedOn() {
        return this.createdOn;
    }

    public void setCreatedOn(Date createdOn) {
        this.createdOn = createdOn;
    }

    @Column(name = "created_by", length = 45)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Column(name = "updated_by", length = 45)
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "updated_on", length = 19)
    public Date getUpdatedOn() {
        return this.updatedOn;
    }

    public void setUpdatedOn(Date updatedOn) {
        this.updatedOn = updatedOn;
    }
}
