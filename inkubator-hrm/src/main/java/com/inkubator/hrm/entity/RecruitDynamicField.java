package com.inkubator.hrm.entity;
// Generated Apr 15, 2015 10:42:07 AM by Hibernate Tools 4.3.1


import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

/**
 * RecruitDynamicField generated by hbm2java
 */
@Entity
@Table(name="recruit_dynamic_field"
    ,catalog="hrm"
    , uniqueConstraints = @UniqueConstraint(columnNames="field_static_reference") 
)
public class RecruitDynamicField  implements java.io.Serializable {


     private long id;
     private String fieldStaticReference;
     private String fieldDataType;
     private String formModel;
     private String fieldNewLabel;
     private Set<RecruitSelectionTypeField> recruitSelectionTypeFields = new HashSet<RecruitSelectionTypeField>(0);

    public RecruitDynamicField() {
    }

	
    public RecruitDynamicField(long id) {
        this.id = id;
    }
    public RecruitDynamicField(long id, String fieldStaticReference, String fieldDataType, String formModel, Set<RecruitSelectionTypeField> recruitSelectionTypeFields) {
       this.id = id;
       this.fieldStaticReference = fieldStaticReference;
       this.fieldDataType = fieldDataType;
       this.formModel = formModel;
       this.recruitSelectionTypeFields = recruitSelectionTypeFields;
    }
   
     @Id 

    
    @Column(name="id", unique=true, nullable=false)
    public long getId() {
        return this.id;
    }
    
    public void setId(long id) {
        this.id = id;
    }

    
    @Column(name="field_static_reference", unique=true, length=45)
    public String getFieldStaticReference() {
        return this.fieldStaticReference;
    }
    
    public void setFieldStaticReference(String fieldStaticReference) {
        this.fieldStaticReference = fieldStaticReference;
    }

    
    @Column(name="field_data_type", length=45)
    public String getFieldDataType() {
        return this.fieldDataType;
    }
    
    public void setFieldDataType(String fieldDataType) {
        this.fieldDataType = fieldDataType;
    }

    
    @Column(name="form_model", length=45)
    public String getFormModel() {
        return this.formModel;
    }
    
    public void setFormModel(String formModel) {
        this.formModel = formModel;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="recruitDynamicField")
    public Set<RecruitSelectionTypeField> getRecruitSelectionTypeFields() {
        return this.recruitSelectionTypeFields;
    }
    
    public void setRecruitSelectionTypeFields(Set<RecruitSelectionTypeField> recruitSelectionTypeFields) {
        this.recruitSelectionTypeFields = recruitSelectionTypeFields;
    }

    @Transient
    public String getFieldNewLabel() {
        return fieldNewLabel;
    }

    public void setFieldNewLabel(String fieldNewLabel) {
        this.fieldNewLabel = fieldNewLabel;
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 89 * hash + (int) (this.id ^ (this.id >>> 32));
        hash = 89 * hash + Objects.hashCode(this.fieldStaticReference);
        hash = 89 * hash + Objects.hashCode(this.fieldDataType);
        hash = 89 * hash + Objects.hashCode(this.formModel);
        hash = 89 * hash + Objects.hashCode(this.fieldNewLabel);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final RecruitDynamicField other = (RecruitDynamicField) obj;
        if (this.id != other.id) {
            return false;
        }
        if (!Objects.equals(this.fieldStaticReference, other.fieldStaticReference)) {
            return false;
        }
        if (!Objects.equals(this.fieldDataType, other.fieldDataType)) {
            return false;
        }
        if (!Objects.equals(this.formModel, other.formModel)) {
            return false;
        }
        if (!Objects.equals(this.fieldNewLabel, other.fieldNewLabel)) {
            return false;
        }
        return true;
    }




}


