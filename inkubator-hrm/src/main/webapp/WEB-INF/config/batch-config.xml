<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch" 
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd">

    <!-- stored job-meta in database -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <!-- calling this to running job -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher" lazy-init="true">
        <property name="jobRepository" ref="jobRepository" />
    </bean>
    <bean id="jobLauncherAsync" class="org.springframework.batch.core.launch.support.SimpleJobLauncher" lazy-init="true">
        <property name="jobRepository" ref="jobRepository" />
        <!-- To make execution asynchronously. For further detail, please refer to this page http://docs.spring.io/spring-batch/trunk/reference/htmlsingle/#configuringJobLauncher -->
        <property name="taskExecutor">
            <bean class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
        </property>
    </bean>
	
	
	
    <!-- ALL batch jobs -->
    <batch:job id="jobSynchDataFingerRealization">
        <batch:step id="stepSynchDataFingerRealization_1">
            <batch:tasklet>
                <batch:chunk reader="customSynchDataFingerRealizationItemReader" writer="customSynchDataFingerRealizationItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobPaySalaryUpload">
        <batch:step id="stepPaySalaryUpload_1">
            <batch:tasklet>
                <batch:chunk reader="customPaySalaryUploadItemReader" writer="customPaySalaryUploadItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobPayAttendanceUpload">
        <batch:step id="stepPayAttendanceUpload_1">
            <batch:tasklet>
                <batch:chunk reader="customPayAttendanceUploadItemReader" writer="customPayAttendanceUploadItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>  
      
    <batch:job id="jobPayTempOvertimeUpload">
        <batch:step id="stepJobPayTempOvertimeUpload_1">
            <batch:tasklet>
                <batch:chunk reader="customPayTempOvertimeUploadItemReader" writer="customPayTempOvertimeUploadItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobFingerSwapCapturedUpload">
        <batch:step id="stepFingerSwapCapturedUpload_1">
            <batch:tasklet>
                <batch:chunk reader="customFingerSwapCapturedUploadItemReader" writer="customFingerSwapCapturedItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobFingerSwapCapturedDownloadXml">
        <batch:step id="stepFingerSwapCapturedDownloadXml_1">
            <batch:tasklet>
                <batch:chunk reader="customFingerSwapCapturedDownloadXmlItemReader" processor="customFingerSwapCapturedDownloadXmlItemProcessor" writer="customFingerSwapCapturedItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <!-- add job execution listener  -->
        <batch:listeners>
        	<batch:listener ref="fingerSwapCapturedDownloadXmlJobListener"/>
        </batch:listeners>
    </batch:job>	
    
    <batch:job id="jobPayEmployeeCalculation">
        <batch:step id="stepPayEmployeeCalculation_1" next="stepPayEmployeeCalculation_2">
            <batch:tasklet>
                <batch:chunk reader="customPayEmployeeCalculationItemReader" writer="customPayEmployeeCalculationItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepPayEmployeeCalculation_2" next="stepPayEmployeeCalculation_3">
            <batch:tasklet>
                <!-- commmit interval is set "2" because the behavior in this step is quite different, item in this step is list(that contains @23 item), so in the real action is commit every @46 record -->
                <batch:chunk reader="customTaxEmployeeCalculationItemReader" processor="customTaxEmployeeCalculationItemProcessor" writer="customTaxEmployeeCalculationItemWriter"
                             commit-interval="2">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepPayEmployeeCalculation_3">
            <batch:tasklet>                
                <batch:chunk reader="customFinalEmployeeCalculationItemReader" writer="customFinalEmployeeCalculationItemWriter"
                             commit-interval="10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <!-- add job execution listener  -->
        <batch:listeners>
        	<batch:listener ref="payEmployeeCalculationJobListener"/>
        </batch:listeners>
    </batch:job>
    
    <batch:job id="jobPayReceiverAccount">
        <batch:step id="stepPayReceiverAccount_1">
            <batch:tasklet>
                <batch:chunk reader="customPayReceiverAccountItemReader" writer="customPayReceiverAccountItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobMonthEndPayroll">
        <batch:step id="stepMonthEndPayroll_1" next="stepMonthEndPayroll_2">
            <batch:tasklet>
                <batch:chunk reader="customMonthEndPayrollItemReader" processor="customMonthEndPayrollItemProcessor" writer="customMonthEndPayrollItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepMonthEndPayroll_2" next="stepMonthEndPayroll_3">
            <batch:tasklet>
                <batch:chunk reader="customMonthEndTransferLogItemReader" writer="customMonthEndTransferLogItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepMonthEndPayroll_3" next="stepMonthEndPayroll_4">
            <batch:tasklet>
                <batch:chunk reader="customMonthEndJournalLogItemReader" processor="customMonthEndJournalLogItemProcessor" writer="customMonthEndJournalLogItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepMonthEndPayroll_4">
            <batch:tasklet>
                <batch:chunk reader="customMonthEndTaxesItemReader" processor="customMonthEndTaxesItemProcessor" writer="customMonthEndTaxesItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <!-- add job execution listener  -->
        <batch:listeners>
        	<batch:listener ref="monthEndPayrollJobListener"/>
        </batch:listeners>
    </batch:job>
    
    <batch:job id="jobMonthEndAttendance">
        <batch:step id="stepMonthEndAttendance_1" next="stepMonthEndAttendance_2">
            <batch:tasklet>
                <batch:chunk reader="customMonthEndAttendanceRealizationItemReader" processor="customMonthEndAttendanceRealizationItemProcessor" writer="customMonthEndAttendanceRealizationItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepMonthEndAttendance_2">
            <batch:tasklet>
                <batch:chunk reader="customMonthEndProcessReadFingerItemReader" processor="customMonthEndProcessReadFingerItemProcessor" writer="customMonthEndProcessReadFingerItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <!-- add job execution listener  -->
        <batch:listeners>
        	<batch:listener ref="monthEndAttendanceJobListener"/>
        </batch:listeners>
    </batch:job>
    
    <batch:job id="jobLoanUpload">
        <batch:step id="stepJobLoanUpload_1">
            <batch:tasklet>
                 <!-- Commit interval di set 1 untuk memastikan kalau id loan yang di dapat pada proses kodefikasi adalah id terakhir.  -->	
                <batch:chunk reader="customLoanUploadItemReader" writer="customLoanUploadItemWriter"
                             commit-interval="1">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobUnregCalculation">
        <batch:step id="stepUnregCalculation_1" next="stepUnregCalculation_2">
            <batch:tasklet>
                <batch:chunk reader="customUnregCalculationSalaryItemReader" writer="customUnregCalculationSalaryItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepUnregCalculation_2" next="stepUnregCalculation_3">
            <batch:tasklet>
                <!-- commmit interval is set "2" because the behavior in this step is quite different, item in this step is list(that contains @23 item), so in the real action is commit every @46 record -->
                <batch:chunk reader="customUnregCalculationTaxItemReader" processor="customUnregCalculationTaxItemProcessor" writer="customUnregCalculationTaxItemWriter"
                             commit-interval="2">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepUnregCalculation_3">
            <batch:tasklet>                
                <batch:chunk reader="customUnregCalculationFinalItemReader" processor="customUnregCalculationFinalItemProcessor" writer="customUnregCalculationFinalItemWriter"
                             commit-interval="10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <!-- add job execution listener  -->
        <batch:listeners>
        	<batch:listener ref="unregCalculationJobListener"/>
        </batch:listeners>
    </batch:job>
    
    <batch:job id="jobUnregPayroll">
        <batch:step id="stepUnregPayroll_1" next="stepUnregPayroll_2">
            <batch:tasklet>
                <batch:chunk reader="customUnregPayrollItemReader" processor="customUnregPayrollItemProcessor" writer="customUnregPayrollItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepUnregPayroll_2" next="stepUnregPayroll_3">
            <batch:tasklet>
                <batch:chunk reader="customUnregTransferLogItemReader" writer="customUnregTransferLogItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepUnregPayroll_3">
            <batch:tasklet>
                <batch:chunk reader="customUnregTaxesItemReader" processor="customUnregTaxesItemProcessor" writer="customUnregTaxesItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <!-- add job execution listener  -->
        <batch:listeners>
        	<batch:listener ref="unregPayrollJobListener"/>
        </batch:listeners>
    </batch:job>
    
    <batch:job id="jobAnnouncementLog">
        <batch:step id="stepAnnouncementLog_1">
            <batch:tasklet>	
                <batch:chunk reader="customAnnouncementLogItemReader" processor="customAnnouncementLogItemProcessor" writer="customAnnouncementLogItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobEmailingAnnouncement">
        <batch:step id="stepEmailingAnnouncement_1">
            <batch:tasklet>	
                <batch:chunk reader="customEmailingAnnouncementItemReader"  writer="customEmailingAnnouncementItemWriter"
                             commit-interval="1">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobEmailingAnnouncementNotSent">
        <batch:step id="stepEmailingAnnouncementNotSent_1">
            <batch:tasklet>	
                <batch:chunk reader="customEmailingAnnouncementNotSentItemReader"  writer="customEmailingAnnouncementNotSentItemWriter"
                             commit-interval="1">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
     <!-- Job Calculation of Emp Attendance Realization  -->
     <batch:job id="jobTempAttendanceRealizationCalculation">
        <batch:step id="stepJobTempAttendanceRealizationCalculation_1">
            <batch:tasklet>                
                <batch:chunk reader="customTempAttendanceRealizationCalculationItemReader" processor="customTempAttendanceRealizationCalculationItemProcessor"
                 writer="customTempAttendanceRealizationCalculationItemWriter"   commit-interval="20"/>               
            </batch:tasklet>
        </batch:step>
        <!-- add job execution listener  -->
        <batch:listeners>
        	<batch:listener ref="tempAttendanceRealizationCalculationJobListener"/>
        </batch:listeners>
    </batch:job>
    
            
    <!-- ALL batch listeners -->
    <bean id="monthEndAttendanceJobListener" class="com.inkubator.hrm.batch.MonthEndAttendanceJobListener" lazy-init="true">
		<property name="wtPeriodeService" ref="wtPeriodeService"/>
		<property name="logWtAttendanceRealizationService" ref="logWtAttendanceRealizationService"/>
		<property name="logWtProcessReadFingerService" ref="logWtProcessReadFingerService"/>	
	</bean>
    <bean id="monthEndPayrollJobListener" class="com.inkubator.hrm.batch.MonthEndPayrollJobListener" lazy-init="true">
		<property name="wtPeriodeService" ref="wtPeriodeService"/>
		<property name="logMonthEndPayrollService" ref="logMonthEndPayrollService"/>
		<property name="logListOfTransferService" ref="logListOfTransferService"/>
		<property name="logSalaryJournalService" ref="logSalaryJournalService"/>
		<property name="logMonthEndTaxesService" ref="logMonthEndTaxesService"/>		
	</bean>
	<bean id="payEmployeeCalculationJobListener" class="com.inkubator.hrm.batch.PayEmployeeCalculationJobListener" lazy-init="true">
		<property name="wtPeriodeService" ref="wtPeriodeService"/>
		<property name="payTempKalkulasiService" ref="payTempKalkulasiService"/>
		<property name="payTempKalkulasiEmpPajakService" ref="payTempKalkulasiEmpPajakService"/>		
	</bean>
	<bean id="unregCalculationJobListener" class="com.inkubator.hrm.batch.UnregCalculationJobListener" lazy-init="true">
		<property name="tempUnregPayrollService" ref="tempUnregPayrollService"/>
		<property name="tempUnregPayrollEmpPajakService" ref="tempUnregPayrollEmpPajakService"/>
		<property name="unregSalaryService" ref="unregSalaryService"/>				
	</bean>
	<bean id="unregPayrollJobListener" class="com.inkubator.hrm.batch.UnregPayrollJobListener" lazy-init="true">
		<property name="logUnregPayrollService" ref="logUnregPayrollService"/>
		<property name="logUnregTaxesService" ref="logUnregTaxesService"/>
		<property name="logUnregListOfTransferService" ref="logUnregListOfTransferService"/>				
	</bean>	
	<bean id="tempAttendanceRealizationCalculationJobListener" class="com.inkubator.hrm.batch.TempAttendanceRealizationCalculationJobListener" lazy-init="true">
		<property name="tempAttendanceRealizationService" ref="tempAttendanceRealizationService"/>					
	</bean>
	<bean id="fingerSwapCapturedDownloadXmlJobListener" class="com.inkubator.hrm.batch.FingerSwapCapturedDownloadXmlJobListener" lazy-init="true">
		<property name="mecineFingerService" ref="mecineFingerService"/>			
	</bean>
	
	
    
    <!-- reader and writer for synchronization_data_finger_realization -->
    <bean id="customSynchDataFingerRealizationItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from EmpData as empData 
	    									where status != 'EMP_TERMINATION'"/>
	    <property name="pageSize" value="10"/>
	</bean>
	<bean id="customSynchDataFingerRealizationItemWriter" class="com.inkubator.hrm.batch.DataFingerRealizationWriter" scope="step" lazy-init="true">
        <property name="tempProcessReadFingerService" ref="tempProcessReadFingerService" />
        <property name="wtPeriodeService" ref="wtPeriodeService" />
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    
	
	
    <!-- reader, processor and writer for month_end attendance/working time -->
    <bean id="customMonthEndAttendanceRealizationItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from TempAttendanceRealization as tempAttendanceRealization 
	    									inner join fetch tempAttendanceRealization.empData as empData
	    									inner join fetch empData.bioData as bioData
	    									inner join fetch empData.jabatanByJabatanId as jabatanByJabatanId
	    									inner join fetch jabatanByJabatanId.department as department
	    									inner join fetch empData.golonganJabatan as golonganJabatan
	    									inner join fetch empData.employeeType as employeeType
	    									inner join fetch tempAttendanceRealization.wtGroupWorking as wtGroupWorking"/>
	    <property name="pageSize" value="100"/>
	</bean>
	<bean id="customMonthEndAttendanceRealizationItemProcessor" class="com.inkubator.hrm.batch.MonthEndAttendanceRealizationProcessor" scope="step" lazy-init="true">
        <property name="periodeId" value="#{jobParameters['periodeId']}"/>
        <property name="periodeStart" value="#{jobParameters['periodeStart']}"/>
        <property name="periodeEnd" value="#{jobParameters['periodeEnd']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customMonthEndAttendanceRealizationItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into log_wt_attendance_realization(emp_data_id,emp_name,emp_nik,emp_jabatan_id,emp_jabatan_code,emp_jabatan_name,emp_gol_jab,emp_departement_id,emp_departement_name,emp_type_id,emp_type_name,wt_periode_id,periode_date_start,periode_date_end,wt_group_working_id,wt_group_working_name,attendance_days_schedule,attendance_days_present,leaves,overtime,permit,sick,duty,created_by,created_on,version) 
            	values (:empDataId,:empName,:empNik,:empJabatanId,:empJabatanCode,:empJabatanName,:empGolJab,:empDepartementId,:empDepartementName,:empTypeId,:empTypeName,:wtPeriodeId,:periodeDateStart,:periodeDateEnd,:wtGroupWorkingId,:wtGroupWorkingName,:attendanceDaysSchedule,:attendanceDaysPresent,:leaves,:overtime,:permit,:sick,:duty,:createdBy,:createdOn,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    <bean id="customMonthEndProcessReadFingerItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from TempProcessReadFinger as tempProcessReadFinger 
	    									inner join fetch tempProcessReadFinger.empData as empData
	    									inner join fetch empData.bioData as bioData
	    									inner join fetch empData.jabatanByJabatanId as jabatanByJabatanId
	    									inner join fetch jabatanByJabatanId.department as department
	    									inner join fetch empData.golonganJabatan as golonganJabatan
	    									inner join fetch empData.employeeType as employeeType"/>
	    <property name="pageSize" value="100"/>
	</bean>
	<bean id="customMonthEndProcessReadFingerItemProcessor" class="com.inkubator.hrm.batch.MonthEndProcessReadFingerProcessor" scope="step" lazy-init="true">
        <property name="periodeId" value="#{jobParameters['periodeId']}"/>
        <property name="periodeStart" value="#{jobParameters['periodeStart']}"/>
        <property name="periodeEnd" value="#{jobParameters['periodeEnd']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customMonthEndProcessReadFingerItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into log_wt_process_read_finger(emp_data_id,emp_name,emp_nik,emp_jabatan_id,emp_jabatan_code,emp_jabatan_name,emp_gol_jab,emp_departement_id,emp_departement_name,emp_type_id,emp_type_name,wt_periode_id,periode_date_start,periode_date_end,working_hour_name,schedule_date,schedule_in,schedule_out,finger_in,finger_out,web_check_in,web_check_out,is_correction_in,is_correction_out,margin_in,margin_out,created_by,created_on,version) 
            	values (:empDataId,:empName,:empNik,:empJabatanId,:empJabatanCode,:empJabatanName,:empGolJab,:empDepartementId,:empDepartementName,:empTypeId,:empTypeName,:wtPeriodeId,:periodeDateStart,:periodeDateEnd,:workingHourName,:scheduleDate,:scheduleIn,:scheduleOut,:fingerIn,:fingerOut,:webCheckIn,:webCheckOut,:isCorrectionIn,:isCorrectionOut,:marginIn,:marginOut,:createdBy,:createdOn,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    
    
    
    <!-- reader, processor and writer for month_end_payroll -->
    <bean id="customMonthEndPayrollItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from PayTempKalkulasi as payTempKalkulasi 
	    									inner join fetch payTempKalkulasi.empData as empData
	    									inner join fetch empData.bioData as bioData
	    									inner join fetch empData.jabatanByJabatanId as jabatanByJabatanId
	    									inner join fetch jabatanByJabatanId.department as department
	    									inner join fetch empData.golonganJabatan as golonganJabatan
	    									inner join fetch empData.employeeType as employeeType
	    									inner join fetch payTempKalkulasi.paySalaryComponent as paySalaryComponent
	    									inner join fetch paySalaryComponent.modelComponent as modelComponent"/>
	    <property name="pageSize" value="100"/>
	</bean>
	<bean id="customMonthEndTransferLogItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from PayTempKalkulasi as payTempKalkulasi 
	    									inner join fetch payTempKalkulasi.empData as empData
	    									inner join fetch empData.bioData as bioData
	    									inner join fetch empData.jabatanByJabatanId as jabatanByJabatanId
	    									inner join fetch jabatanByJabatanId.department as department
	    									inner join fetch empData.golonganJabatan as golonganJabatan
	    									inner join fetch payTempKalkulasi.paySalaryComponent as paySalaryComponent
	    									inner join fetch paySalaryComponent.modelComponent as modelComponent
	    									where modelComponent.spesific = :spesific"/>
	   	<property name="parameterValues">
	   		<map>
	   			<entry key="spesific" value="100" value-type="java.lang.Integer"/>	   			
	   		</map>
	   	</property>
	    <property name="pageSize" value="100"/>
	</bean>
	<bean id="customMonthEndJournalLogItemReader" class="com.inkubator.hrm.batch.MonthEndJournalLogReader" scope="step" lazy-init="true">
        <constructor-arg name="payTempKalkulasiService" ref="payTempKalkulasiService"/>
        <constructor-arg name="locale" value="#{jobParameters['locale']}"/>
    </bean>
    <bean id="customMonthEndTaxesItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from PayTempKalkulasiEmpPajak as payTempKalkulasiEmpPajak 
	    									inner join fetch payTempKalkulasiEmpPajak.empData as empData
	    									inner join fetch empData.bioData as bioData
	    									inner join fetch empData.jabatanByJabatanId as jabatanByJabatanId
	    									inner join fetch jabatanByJabatanId.department as department
	    									inner join fetch empData.golonganJabatan as golonganJabatan
	    									inner join fetch empData.employeeType as employeeType
	    									inner join fetch payTempKalkulasiEmpPajak.taxComponent as taxComponent"/>
	    <property name="pageSize" value="100"/>
	</bean>
	<bean id="customMonthEndPayrollItemProcessor" class="com.inkubator.hrm.batch.MonthEndPayrollProcessor" scope="step" lazy-init="true">
        <property name="periodeId" value="#{jobParameters['periodeId']}"/>
        <property name="periodeStart" value="#{jobParameters['periodeStart']}"/>
        <property name="periodeEnd" value="#{jobParameters['periodeEnd']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customMonthEndJournalLogItemProcessor" class="com.inkubator.hrm.batch.MonthEndJournalLogProcessor" scope="step" lazy-init="true">
        <constructor-arg name="wtPeriodeService" ref="wtPeriodeService"/>
        <constructor-arg name="periodeId" value="#{jobParameters['periodeId']}"/>        
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customMonthEndTaxesItemProcessor" class="com.inkubator.hrm.batch.MonthEndTaxesProcessor" scope="step" lazy-init="true">
        <property name="periodeId" value="#{jobParameters['periodeId']}"/>
        <property name="periodeStart" value="#{jobParameters['periodeStart']}"/>
        <property name="periodeEnd" value="#{jobParameters['periodeEnd']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
	<bean id="customMonthEndPayrollItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into log_month_end_payroll(emp_data_id,emp_name,emp_nik,emp_jabatan_id,emp_jabatan_code,emp_jabatan_name,emp_gol_jabatan,department_id,department_name,emp_type_id,emp_type_name,factor,nominal,model_comp_specific,pay_salary_comp_id,pay_salary_comp_code,pay_salary_desc,periode_id,periode_start,periode_end,created_by,created_on,version) 
            	values (:empDataId,:empName,:empNik,:empJabatanId,:empJabatanCode,:empJabatanName,:empGolJabatan,:departmentId,:departmentName,:empTypeId,:empTypeName,:factor,:nominal,:modelCompSpecific,:paySalaryCompId,:paySalaryCompCode,:paySalaryDesc,:periodeId,:periodeStart,:periodeEnd,:createdBy,:createdOn,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    <bean id="customMonthEndTransferLogItemWriter" class="com.inkubator.hrm.batch.MonthEndTransferLogWriter" scope="step" lazy-init="true">    	
    	<property name="wtPeriodeService" ref="wtPeriodeService"/>
    	<property name="logListOfTransferService" ref="logListOfTransferService"/>
    	<property name="periodeId" value="#{jobParameters['periodeId']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customMonthEndJournalLogItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	INSERT INTO log_salary_journal (periode_id,cost_center_id,cost_center_code,cost_center_name,journal_id,journal_code,journal_name,debit,credit,created_by,created_on,version)
				VALUES (:wtPeriode.Id,:costCenterId,:costCenterCode,:costCenterName,:journalId,:journalCode,:journalName,:debit,:credit,:createdBy,:createdOn,0)            	
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    <bean id="customMonthEndTaxesItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into log_month_end_taxes(emp_data_id,emp_name,emp_nik,emp_jabatan_id,emp_jabatan_code,emp_jabatan_name,emp_gol_jabatan,department_id,department_name,emp_type_id,emp_type_name,nominal,tax_comp_id,tax_comp_name,periode_id,periode_start,periode_end,created_by,created_on,version) 
            	values (:empDataId,:empName,:empNik,:empJabatanId,:empJabatanCode,:empJabatanName,:empGolJabatan,:departmentId,:departmentName,:empTypeId,:empTypeName,:nominal,:taxCompId,:taxCompName,:periodeId,:periodeStart,:periodeEnd,:createdBy,:createdOn,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
  
  

    <!-- reader and writer for pay_receiver_account -->
    <bean id="customPayReceiverAccountItemReader" class="com.inkubator.hrm.batch.PayReceiverAccountReader" scope="step" lazy-init="true">
        <constructor-arg name="payReceiverBankAccountService" ref="payReceiverBankAccountService"/>
        <property name="payTempKalkulasiService" ref="payTempKalkulasiService"/>
    </bean>
    <bean name="customPayReceiverAccountItemWriter" class="com.inkubator.hrm.batch.PayReceiverAccountWriter" scope="step" lazy-init="true">
    	<property name="fileName" value="#{jobParameters['fileName']}"/>
    </bean>
	
	
	
    <!-- reader and writer for pay_salary_upload -->	
    <bean id="customPaySalaryUploadItemReader" class="com.inkubator.hrm.batch.PaySalaryUploadReader" scope="step" destroy-method="destroy" lazy-init="true">
        <constructor-arg name="filePath"  value="#{jobParameters['input.file.path']}"></constructor-arg>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="paySalaryComponentId" value="#{jobParameters['paySalaryComponentId']}"/>
    </bean>	
    <bean id="customPaySalaryUploadItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="payTempUploadDataService" />
        <property name="targetMethod" value="executeBatchFileUpload" />
    </bean>
    
    
    
    <!-- reader and writer for pay_temp_attendance_upload -->	
    <bean id="customPayAttendanceUploadItemReader" class="com.inkubator.hrm.batch.PayTempAttendanceUploadReader" scope="step" destroy-method="destroy" lazy-init="true">
        <constructor-arg name="filePath"  value="#{jobParameters['input.file.path']}"></constructor-arg>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
    </bean>	
    <bean id="customPayAttendanceUploadItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="payTempAttendanceStatusService" />
        <property name="targetMethod" value="executeBatchFileUpload" />
    </bean>
    
    
    
    <!-- reader and writer for pay_temp_overtime_upload-->	
    <bean id="customPayTempOvertimeUploadItemReader" class="com.inkubator.hrm.batch.PayTempOvertimeUploadReader" scope="step" destroy-method="destroy" lazy-init="true">
        <constructor-arg name="filePath"  value="#{jobParameters['input.file.path']}"></constructor-arg>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
    </bean>	
    <bean id="customPayTempOvertimeUploadItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="payTempOvertimeService" />
        <property name="targetMethod" value="executeBatchFileUpload" />
    </bean>
	
	
	
	<!-- reader and writer for finger_swap_captured download OR upload -->	
    <bean id="customFingerSwapCapturedUploadItemReader" class="com.inkubator.hrm.batch.FingerSwapCapturedUploadReader" scope="step" destroy-method="destroy" lazy-init="true">
        <constructor-arg name="filePath"  value="#{jobParameters['input.file.path']}"></constructor-arg>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="machineId" value="#{jobParameters['machineId']}"/>
    </bean>
    <bean id="customFingerSwapCapturedDownloadXmlItemReader" class="org.springframework.batch.item.xml.StaxEventItemReader" scope="step">
	    <property name="fragmentRootElementName" value="#{jobParameters['fragmentRootElementName']}" />
	    <property name="resource" value="#{jobParameters['resourcePath']}" />
	    <property name="unmarshaller">
	    	<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
                <property name="classesToBeBound">
                    <list>
                        <value>com.inkubator.hrm.web.model.FingerSwapCapturedBatchModel</value>
                    </list>
                </property>
            </bean>
	    </property>
	</bean>	
	<bean id="customFingerSwapCapturedDownloadXmlItemProcessor" class="com.inkubator.hrm.batch.FingerSwapCapturedDownloadXmlProcessor" scope="step" lazy-init="true">
        <property name="machineId" value="#{jobParameters['machineId']}"/>
    </bean>
    <bean id="customFingerSwapCapturedItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="fingerSwapCapturedService" />
        <property name="targetMethod" value="executeBatchProcess" />
    </bean>
    
    
    	
    <!-- reader, processor and writer for pay_employee_calculation -->
    <bean id="customPayEmployeeCalculationItemReader" class="com.inkubator.hrm.batch.PayEmployeeCalculationReader" scope="step" lazy-init="true">
        <constructor-arg name="payTempKalkulasiService" ref="payTempKalkulasiService"/>
        <constructor-arg name="startPeriodDate" value="#{jobParameters['startPeriodDate']}"/>
        <constructor-arg name="endPeriodDate" value="#{jobParameters['endPeriodDate']}"/>
        <constructor-arg name="createdOn" value="#{jobParameters['createdOn']}"/>
        <constructor-arg name="createdBy" value="#{jobParameters['createdBy']}"/>
    </bean>	
    <bean id="customTaxEmployeeCalculationItemReader" class="com.inkubator.hrm.batch.TaxEmployeeCalculationReader" scope="step" lazy-init="true">
        <constructor-arg name="empDataService" ref="empDataService"/>
        <constructor-arg name="endPeriodDate" value="#{jobParameters['endPeriodDate']}"/>
        <property name="payTempKalkulasiService" ref="payTempKalkulasiService"/>
    </bean>
    <bean id="customFinalEmployeeCalculationItemReader" class="com.inkubator.hrm.batch.FinalEmployeeCalculationReader" scope="step" lazy-init="true">
        <constructor-arg name="empDataService" ref="empDataService"/>
        <constructor-arg name="endPeriodDate" value="#{jobParameters['endPeriodDate']}"/>
    </bean>
    <bean id="customTaxEmployeeCalculationItemProcessor" class="com.inkubator.hrm.batch.TaxEmployeeCalculationProcessor" scope="step" lazy-init="true">		
        <constructor-arg name="taxRateService" ref="taxRateService"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
    </bean>	
    <bean id="customPayEmployeeCalculationItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into pay_temp_kalkulasi(id,pay_salary_component_id,emp_data_id,nominal,factor,detail,created_on,created_by,version) values (:id,:paySalaryComponent.id,:empData.id,:nominal,:factor,:detail,:createdOn,:createdBy,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    <bean id="customTaxEmployeeCalculationItemWriter" class="com.inkubator.hrm.batch.TaxEmployeeCalculationWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into pay_temp_kalkulasi_emp_pajak(id,tax_component_id,emp_data_id,nominal,created_on,created_by,version) values (:id,:taxComponent.id,:empData.id,:nominal,:createdOn,:createdBy,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    <bean id="customFinalEmployeeCalculationItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="payTempKalkulasiService" />
        <property name="targetMethod" value="executeBatchFinalSalaryCalculation" />
    </bean>	
    
    
    
    <!-- reader and writer for loan_upload -->	
    <bean id="customLoanUploadItemReader" class="com.inkubator.hrm.batch.LoanUploadReader" scope="step" destroy-method="destroy" lazy-init="true">
        <constructor-arg name="filePath"  value="#{jobParameters['input.file.path']}"></constructor-arg>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="loanSchemeId" value="#{jobParameters['loanSchemeId']}"/>
    </bean>	
    <bean id="customLoanUploadItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="loanService" />
        <property name="targetMethod" value="executeBatchFileUpload" />
    </bean>
    
    
    
    <!-- reader, processor and writer for unreg_calculation -->
    <bean id="customUnregCalculationSalaryItemReader" class="com.inkubator.hrm.batch.UnregCalculationSalaryReader" scope="step" lazy-init="true">
        <constructor-arg name="tempUnregPayrollService" ref="tempUnregPayrollService"/>
        <constructor-arg name="unregSalaryId" value="#{jobParameters['unregSalaryId']}"/>
        <constructor-arg name="createdOn" value="#{jobParameters['createdOn']}"/>
        <constructor-arg name="createdBy" value="#{jobParameters['createdBy']}"/>
    </bean>	
    <bean id="customUnregCalculationSalaryItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into temp_unreg_payroll(id,pay_salary_component_id,unreg_salary_id,emp_data_id,nominal,factor,created_on,created_by,version) 
            	values (:id,:paySalaryComponent.id,:unregSalary.id,:empData.id,:nominal,:factor,:createdOn,:createdBy,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    <bean id="customUnregCalculationTaxItemReader" class="com.inkubator.hrm.batch.UnregCalculationTaxReader" scope="step" lazy-init="true">
        <constructor-arg name="unregSalaryId" value="#{jobParameters['unregSalaryId']}"/>
        <constructor-arg name="tempUnregPayrollService" ref="tempUnregPayrollService"/>
    </bean>    
    <bean id="customUnregCalculationTaxItemProcessor" class="com.inkubator.hrm.batch.UnregCalculationTaxProcessor" scope="step" lazy-init="true">		
        <constructor-arg name="taxRateService" ref="taxRateService"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
    </bean>	    
    <bean id="customUnregCalculationTaxItemWriter" class="com.inkubator.hrm.batch.UnregCalculationTaxWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into temp_unreg_payroll_emp_pajak(id,tax_component_id,unreg_salary_id,emp_data_id,nominal,created_on,created_by,version) 
            	values (:id,:taxComponent.id,:unregSalary.id,:empData.id,:nominal,:createdOn,:createdBy,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    <bean id="customUnregCalculationFinalItemReader" class="com.inkubator.hrm.batch.UnregCalculationFinalReader" scope="step" lazy-init="true">        
        <constructor-arg name="unregSalaryId" value="#{jobParameters['unregSalaryId']}"/>
        <constructor-arg name="tempUnregPayrollService" ref="tempUnregPayrollService"/>
    </bean>
    <bean id="customUnregCalculationFinalItemProcessor" class="com.inkubator.hrm.batch.UnregCalculationFinalProcessor" scope="step" lazy-init="true">		
        <constructor-arg name="unregSalaryId" value="#{jobParameters['unregSalaryId']}"/>
    </bean>
    <bean id="customUnregCalculationFinalItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="tempUnregPayrollService" />
        <property name="targetMethod" value="executeBatchUnregCalculationFinal" />
    </bean>
       
    
    
    <!-- reader, processor and writer for unreg_payroll -->
    <bean id="customUnregPayrollItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" scope="step" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from TempUnregPayroll as tempUnregPayroll 
	    									inner join fetch tempUnregPayroll.empData as empData
	    									inner join fetch empData.bioData as bioData
	    									inner join fetch empData.jabatanByJabatanId as jabatanByJabatanId
	    									inner join fetch jabatanByJabatanId.department as department
	    									inner join fetch empData.golonganJabatan as golonganJabatan
	    									inner join fetch empData.employeeType as employeeType
	    									inner join fetch tempUnregPayroll.paySalaryComponent as paySalaryComponent
	    									inner join fetch paySalaryComponent.modelComponent as modelComponent
	    									inner join fetch tempUnregPayroll.unregSalary as unregSalary
	    									inner join fetch unregSalary.wtPeriode as wtPeriode
	    									where unregSalary.id = :unregSalaryId"/>
	   	<property name="parameterValues">
	   		<map>
	   			<entry key="unregSalaryId" value="#{jobParameters['unregSalaryId']}" value-type="java.lang.Long"/>	   			
	   		</map>
	   	</property>
	    <property name="pageSize" value="100"/>
	</bean>
	<bean id="customUnregPayrollItemProcessor" class="com.inkubator.hrm.batch.UnregPayrollProcessor" scope="step" lazy-init="true">
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customUnregPayrollItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into log_unreg_payroll(unreg_salary_id,unreg_salary_name,unreg_salary_start_period,unreg_salary_end_period,unreg_salary_payment_date,emp_data_id,emp_name,emp_nik,emp_jabatan_id,emp_jabatan_code,emp_jabatan_name,emp_gol_jabatan,department_id,department_name,emp_type_id,emp_type_name,factor,nominal,model_comp_specific,pay_salary_comp_id,pay_salary_comp_code,pay_salary_desc,periode_id,periode_start,periode_end,created_by,created_on,version) 
            	values (:unregSalaryId,:unregSalaryName,:unregSalaryStartPeriod,:unregSalaryEndPeriod,:unregSalaryPaymentDate,:empDataId,:empName,:empNik,:empJabatanId,:empJabatanCode,:empJabatanName,:empGolJabatan,:departmentId,:departmentName,:empTypeId,:empTypeName,:factor,:nominal,:modelCompSpecific,:paySalaryCompId,:paySalaryCompCode,:paySalaryDesc,:periodeId,:periodeStart,:periodeEnd,:createdBy,:createdOn,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>    
	<bean id="customUnregTransferLogItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" scope="step" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from TempUnregPayroll as tempUnregPayroll 
	    									inner join fetch tempUnregPayroll.empData as empData
	    									inner join fetch empData.bioData as bioData
	    									inner join fetch empData.jabatanByJabatanId as jabatanByJabatanId
	    									inner join fetch jabatanByJabatanId.department as department
	    									inner join fetch empData.golonganJabatan as golonganJabatan
	    									inner join fetch tempUnregPayroll.paySalaryComponent as paySalaryComponent
	    									inner join fetch paySalaryComponent.modelComponent as modelComponent
	    									inner join fetch tempUnregPayroll.unregSalary as unregSalary
	    									inner join fetch unregSalary.wtPeriode as wtPeriode
	    									where modelComponent.spesific = :spesific
	    									and unregSalary.id = :unregSalaryId"/>
	   	<property name="parameterValues">
	   		<map>
	   			<entry key="spesific" value="100" value-type="java.lang.Integer"/>
	   			<entry key="unregSalaryId" value="#{jobParameters['unregSalaryId']}" value-type="java.lang.Long"/>	   			
	   		</map>
	   	</property>
	    <property name="pageSize" value="100"/>
	</bean>
	<bean id="customUnregTransferLogItemWriter" class="com.inkubator.hrm.batch.UnregPayrollTransferLogWriter" scope="step" lazy-init="true">    	
    	<property name="logUnregListOfTransferService" ref="logUnregListOfTransferService"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customUnregTaxesItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" scope="step" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from TempUnregPayrollEmpPajak as tempUnregPayrollEmpPajak 
	    									inner join fetch tempUnregPayrollEmpPajak.empData as empData
	    									inner join fetch empData.bioData as bioData
	    									inner join fetch empData.jabatanByJabatanId as jabatanByJabatanId
	    									inner join fetch jabatanByJabatanId.department as department
	    									inner join fetch empData.golonganJabatan as golonganJabatan
	    									inner join fetch empData.employeeType as employeeType
	    									inner join fetch tempUnregPayrollEmpPajak.taxComponent as taxComponent
	    									inner join fetch tempUnregPayrollEmpPajak.unregSalary as unregSalary
	    									inner join fetch unregSalary.wtPeriode as wtPeriode
	    									where unregSalary.id = :unregSalaryId"/>
	    <property name="parameterValues">
	   		<map>
	   			<entry key="unregSalaryId" value="#{jobParameters['unregSalaryId']}" value-type="java.lang.Long"/>	   			
	   		</map>
	   	</property>
	   	<property name="pageSize" value="100"/>
	</bean>
    <bean id="customUnregTaxesItemProcessor" class="com.inkubator.hrm.batch.UnregPayrollTaxesProcessor" scope="step" lazy-init="true">
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customUnregTaxesItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into log_unreg_taxes(unreg_salary_id,unreg_salary_name,unreg_salary_start_period,unreg_salary_end_period,unreg_salary_payment_date,emp_data_id,emp_name,emp_nik,emp_jabatan_id,emp_jabatan_code,emp_jabatan_name,emp_gol_jabatan,department_id,department_name,emp_type_id,emp_type_name,nominal,tax_comp_id,tax_comp_name,periode_id,periode_start,periode_end,created_by,created_on,version) 
            	values (:unregSalaryId,:unregSalaryName,:unregSalaryStartPeriod,:unregSalaryEndPeriod,:unregSalaryPaymentDate,:empDataId,:empName,:empNik,:empJabatanId,:empJabatanCode,:empJabatanName,:empGolJabatan,:departmentId,:departmentName,:empTypeId,:empTypeName,:nominal,:taxCompId,:taxCompName,:periodeId,:periodeStart,:periodeEnd,:createdBy,:createdOn,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    
    
    
    <!-- reader, processor and writer for creating announcement_log -->
    <bean id="customAnnouncementLogItemReader" class="com.inkubator.hrm.batch.AnnouncementLogReader" scope="step" lazy-init="true">
        <constructor-arg name="empDataService" ref="empDataService"/>
        <constructor-arg name="announcementId" value="#{jobParameters['announcementId']}"/>
    </bean>
    <bean id="customAnnouncementLogItemProcessor" class="com.inkubator.hrm.batch.AnnouncementLogProcessor" scope="step" lazy-init="true">
        <constructor-arg name="announcementService" ref="announcementService"/>
        <constructor-arg name="announcementId" value="#{jobParameters['announcementId']}"/>        
        <property name="planExecutionDate" value="#{jobParameters['planExecutionDate']}"/>
    </bean>
    <bean id="customAnnouncementLogItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	INSERT INTO announcement_log (announcement_id,emp_data_id,is_already_executed,plan_execution_date,created_by,created_on,version)
				VALUES (:announcement.Id,:empData.id,:isAlreadyExecuted,:planExecutionDate,:createdBy,:createdOn,0)            	
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    
    
    
    <!-- reader and writer for sending email announcement -->
	<bean id="customEmailingAnnouncementItemReader" class="com.inkubator.hrm.batch.EmailingAnnouncementLogReader" scope="step" lazy-init="true">
        <constructor-arg name="announcementLogService" ref="announcementLogService"/>
        <constructor-arg name="announcementId" value="#{jobParameters['announcementId']}"/>
        <constructor-arg name="planExecutionDate" value="#{jobParameters['planExecutionDate']}"/>
    </bean>
	<bean id="customEmailingAnnouncementItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="announcementLogCronService" />
        <property name="targetMethod" value="executeBatchSendingEmail" />
    </bean>
    <bean id="customEmailingAnnouncementNotSentItemReader" class="com.inkubator.hrm.batch.EmailingAnnouncementNotSentLogReader" scope="step" lazy-init="true">
        <constructor-arg name="announcementLogService" ref="announcementLogService"/>
    </bean>
	<bean id="customEmailingAnnouncementNotSentItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="announcementLogCronService" />
        <property name="targetMethod" value="executeBatchSendingEmail" />
    </bean>
    
    <!-- reader, processor, and writer for temp attendance realization calculation -->	
    <bean id="customTempAttendanceRealizationCalculationItemReader" class="com.inkubator.hrm.batch.TempAttendanceRealizationCalculationReader" scope="step" destroy-method="destroy" lazy-init="true">
    	<constructor-arg name="empDataService" ref="empDataService"/>
        <constructor-arg name="periodUntillDate"  value="#{jobParameters['periodUntillDate']}"></constructor-arg>      
    </bean>	
    <bean id="customTempAttendanceRealizationCalculationItemProcessor" class="com.inkubator.hrm.batch.TempAttendanceRealizationCalculationProcessor" scope="step" lazy-init="true">
    	<constructor-arg name="tempAttendanceRealizationService" ref="tempAttendanceRealizationService"/>
    	<property name="wtPeriodId" value="#{jobParameters['wtPeriodId']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customTempAttendanceRealizationCalculationItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="tempAttendanceRealizationService" />      
        <property name="targetMethod" value="executeBatchFileUpload" />        
    </bean>
    
</beans>
