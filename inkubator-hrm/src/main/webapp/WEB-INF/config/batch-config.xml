<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch" 
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd">

    <!-- stored job-meta in database -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <!-- calling this to running job -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher" lazy-init="true">
        <property name="jobRepository" ref="jobRepository" />
    </bean>
    <bean id="jobLauncherAsync" class="org.springframework.batch.core.launch.support.SimpleJobLauncher" lazy-init="true">
        <property name="jobRepository" ref="jobRepository" />
        <!-- To make execution asynchronously. For further detail, please refer to this page http://docs.spring.io/spring-batch/trunk/reference/htmlsingle/#configuringJobLauncher -->
        <property name="taskExecutor">
            <bean class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
        </property>
    </bean>
	
	
	
    <!-- ALL batch jobs -->
    <batch:job id="jobSynchDataFingerRealization">
        <batch:step id="stepSynchDataFingerRealization_1">
            <batch:tasklet>
                <batch:chunk reader="customSynchDataFingerRealizationItemReader" writer="customSynchDataFingerRealizationItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobPaySalaryUpload">
        <batch:step id="stepPaySalaryUpload_1">
            <batch:tasklet>
                <batch:chunk reader="customPaySalaryUploadItemReader" writer="customPaySalaryUploadItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobPayAttendanceUpload">
        <batch:step id="stepPayAttendanceUpload_1">
            <batch:tasklet>
                <batch:chunk reader="customPayAttendanceUploadItemReader" writer="customPayAttendanceUploadItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>  
      
    <batch:job id="jobPayTempOvertimeUpload">
        <batch:step id="stepJobPayTempOvertimeUpload_1">
            <batch:tasklet>
                <batch:chunk reader="customPayTempOvertimeUploadItemReader" writer="customPayTempOvertimeUploadItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>	
    
    <batch:job id="jobPayEmployeeCalculation">
        <batch:step id="stepPayEmployeeCalculation_1" next="stepPayEmployeeCalculation_2">
            <batch:tasklet>
                <batch:chunk reader="customPayEmployeeCalculationItemReader" writer="customPayEmployeeCalculationItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepPayEmployeeCalculation_2" next="stepPayEmployeeCalculation_3">
            <batch:tasklet>
                <!-- commmit interval is set "2" because the behavior in this step is quite different, item in this step is list(that contains @23 item), so in the real action is commit every @46 record -->
                <batch:chunk reader="customTaxEmployeeCalculationItemReader" processor="customTaxEmployeeCalculationItemProcessor" writer="customTaxEmployeeCalculationItemWriter"
                             commit-interval="2">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepPayEmployeeCalculation_3">
            <batch:tasklet>                
                <batch:chunk reader="customFinalEmployeeCalculationItemReader" writer="customFinalEmployeeCalculationItemWriter"
                             commit-interval="10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <!-- add job execution listener  -->
        <batch:listeners>
        	<batch:listener ref="payEmployeeCalculationJobListener"/>
        </batch:listeners>
    </batch:job>
    
    <batch:job id="jobPayReceiverAccount">
        <batch:step id="stepPayReceiverAccount_1">
            <batch:tasklet>
                <batch:chunk reader="customPayReceiverAccountItemReader" writer="customPayReceiverAccountItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    <batch:job id="jobMonthEndPayroll">
        <batch:step id="stepMonthEndPayroll_1" next="stepMonthEndPayroll_2">
            <batch:tasklet>
                <batch:chunk reader="customMonthEndPayrollItemReader" processor="customMonthEndPayrollItemProcessor" writer="customMonthEndPayrollItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepMonthEndPayroll_2" next="stepMonthEndPayroll_3">
            <batch:tasklet>
                <batch:chunk reader="customMonthEndTransferLogItemReader" writer="customMonthEndTransferLogItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="stepMonthEndPayroll_3" >
            <batch:tasklet>
                <batch:chunk reader="customMonthEndJournalLogItemReader" processor="customMonthEndJournalLogItemProcessor" writer="customMonthEndJournalLogItemWriter"
                             commit-interval="20">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <!-- add job execution listener  -->
        <batch:listeners>
        	<batch:listener ref="monthEndPayrollJobListener"/>
        </batch:listeners>
    </batch:job>
    
    <batch:job id="jobLoanUpload">
        <batch:step id="stepJobLoanUpload_1">
            <batch:tasklet>
                 <!-- Commit interval di set 1 untuk memastikan kalau id loan yang di dapat pada proses kodefikasi adalah id terakhir.  -->	
                <batch:chunk reader="customLoanUploadItemReader" writer="customLoanUploadItemWriter"
                             commit-interval="1">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    
    
            
    <!-- ALL batch listeners -->
    <bean id="monthEndPayrollJobListener" class="com.inkubator.hrm.batch.MonthEndPayrollJobListener" lazy-init="true">
		<property name="wtPeriodeService" ref="wtPeriodeService"/>
		<property name="logMonthEndPayrollService" ref="logMonthEndPayrollService"/>
		<property name="logListOfTransferService" ref="logListOfTransferService"/>
		<property name="logSalaryJournalService" ref="logSalaryJournalService"/>		
	</bean>
	<bean id="payEmployeeCalculationJobListener" class="com.inkubator.hrm.batch.PayEmployeeCalculationJobListener" lazy-init="true">
		<property name="wtPeriodeService" ref="wtPeriodeService"/>
		<property name="payTempKalkulasiService" ref="payTempKalkulasiService"/>
		<property name="payTempKalkulasiEmpPajakService" ref="payTempKalkulasiEmpPajakService"/>		
	</bean>
	
	
    
    <!-- reader and writer for synchronization_data_finger_realization -->
    <bean id="customSynchDataFingerRealizationItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from EmpData as empData 
	    									where status != 'EMP_TERMINATION'"/>
	    <property name="pageSize" value="10"/>
	</bean>
	<bean id="customSynchDataFingerRealizationItemWriter" class="com.inkubator.hrm.batch.DataFingerRealizationWriter" scope="step" lazy-init="true">
        <property name="tempProcessReadFingerService" ref="tempProcessReadFingerService" />
        <property name="wtPeriodeService" ref="wtPeriodeService" />
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    
	
	
    <!-- reader, processor and writer for month_end_payroll -->
    <bean id="customMonthEndPayrollItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from PayTempKalkulasi as payTempKalkulasi 
	    									inner join fetch payTempKalkulasi.empData as empData
	    									inner join fetch empData.bioData as bioData
	    									inner join fetch empData.golonganJabatan as golonganJabatan
	    									inner join fetch empData.employeeType as employeeType
	    									inner join fetch payTempKalkulasi.paySalaryComponent as paySalaryComponent
	    									inner join fetch paySalaryComponent.modelComponent as modelComponent"/>
	    <property name="pageSize" value="100"/>
	</bean>
	<bean id="customMonthEndTransferLogItemReader" class="org.springframework.batch.item.database.HibernatePagingItemReader" lazy-init="true">
	    <property name="sessionFactory" ref="sessionFactory"/>
	    <property name="queryString" value="from PayTempKalkulasi as payTempKalkulasi 
	    									inner join fetch payTempKalkulasi.empData as empData
	    									inner join fetch empData.bioData as bioData
	    									inner join fetch payTempKalkulasi.paySalaryComponent as paySalaryComponent
	    									inner join fetch paySalaryComponent.modelComponent as modelComponent
	    									where modelComponent.spesific = :spesific"/>
	   	<property name="parameterValues">
	   		<map>
	   			<entry key="spesific" value="100" value-type="java.lang.Integer"/>	   			
	   		</map>
	   	</property>
	    <property name="pageSize" value="100"/>
	</bean>
	<bean id="customMonthEndJournalLogItemReader" class="com.inkubator.hrm.batch.MonthEndJournalLogReader" scope="step" lazy-init="true">
        <constructor-arg name="payTempKalkulasiService" ref="payTempKalkulasiService"/>
        <constructor-arg name="locale" value="#{jobParameters['locale']}"/>
    </bean>
	<bean id="customMonthEndPayrollItemProcessor" class="com.inkubator.hrm.batch.MonthEndPayrollProcessor" scope="step" lazy-init="true">
        <property name="periodeId" value="#{jobParameters['periodeId']}"/>
        <property name="periodeStart" value="#{jobParameters['periodeStart']}"/>
        <property name="periodeEnd" value="#{jobParameters['periodeEnd']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customMonthEndJournalLogItemProcessor" class="com.inkubator.hrm.batch.MonthEndJournalLogProcessor" scope="step" lazy-init="true">
        <constructor-arg name="wtPeriodeService" ref="wtPeriodeService"/>
        <constructor-arg name="periodeId" value="#{jobParameters['periodeId']}"/>        
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
	<bean id="customMonthEndPayrollItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into log_month_end_payroll(emp_data_id,emp_gol_jabatan,emp_name,emp_nik,emp_status,factor,nominal,model_comp_specific,pay_salary_comp_id,pay_salary_comp_code,pay_salary_desc,periode_id,periode_start,periode_end,created_by,created_on,version) 
            	values (:empDataId,:empGolJabatan,:empName,:empNik,:empStatus,:factor,:nominal,:modelCompSpecific,:paySalaryCompId,:paySalaryCompCode,:paySalaryDesc,:periodeId,:periodeStart,:periodeEnd,:createdBy,:createdOn,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    <bean id="customMonthEndTransferLogItemWriter" class="com.inkubator.hrm.batch.MonthEndTransferLogWriter" scope="step" lazy-init="true">    	
    	<property name="wtPeriodeService" ref="wtPeriodeService"/>
    	<property name="logListOfTransferService" ref="logListOfTransferService"/>
    	<property name="periodeId" value="#{jobParameters['periodeId']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
    </bean>
    <bean id="customMonthEndJournalLogItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	INSERT INTO log_salary_journal (periode_id,cost_center_id,cost_center_code,cost_center_name,journal_id,journal_code,journal_name,debit,credit,created_by,created_on,version)
				VALUES (:wtPeriode.Id,:costCenterId,:costCenterCode,:costCenterName,:journalId,:journalCode,:journalName,:debit,:credit,:createdBy,:createdOn,0)            	
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
  
  

    <!-- reader and writer for pay_receiver_account -->
    <bean id="customPayReceiverAccountItemReader" class="com.inkubator.hrm.batch.PayReceiverAccountReader" scope="step" lazy-init="true">
        <constructor-arg name="payReceiverBankAccountService" ref="payReceiverBankAccountService"/>
        <property name="payTempKalkulasiService" ref="payTempKalkulasiService"/>
    </bean>
    <bean name="customPayReceiverAccountItemWriter" class="com.inkubator.hrm.batch.PayReceiverAccountWriter" scope="step" lazy-init="true">
    	<property name="fileName" value="#{jobParameters['fileName']}"/>
    </bean>
	
	
	
    <!-- reader and writer for pay_salary_upload -->	
    <bean id="customPaySalaryUploadItemReader" class="com.inkubator.hrm.batch.PaySalaryUploadReader" scope="step" destroy-method="destroy" lazy-init="true">
        <constructor-arg name="filePath"  value="#{jobParameters['input.file.path']}"></constructor-arg>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="paySalaryComponentId" value="#{jobParameters['paySalaryComponentId']}"/>
    </bean>	
    <bean id="customPaySalaryUploadItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="payTempUploadDataService" />
        <property name="targetMethod" value="executeBatchFileUpload" />
    </bean>
    
    
    
    <!-- reader and writer for pay_temp_attendance_upload -->	
    <bean id="customPayAttendanceUploadItemReader" class="com.inkubator.hrm.batch.PayTempAttendanceUploadReader" scope="step" destroy-method="destroy" lazy-init="true">
        <constructor-arg name="filePath"  value="#{jobParameters['input.file.path']}"></constructor-arg>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
    </bean>	
    <bean id="customPayAttendanceUploadItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="payTempAttendanceStatusService" />
        <property name="targetMethod" value="executeBatchFileUpload" />
    </bean>
    
    
    
    <!-- reader and writer for pay_temp_overtime_upload-->	
    <bean id="customPayTempOvertimeUploadItemReader" class="com.inkubator.hrm.batch.PayTempOvertimeUploadReader" scope="step" destroy-method="destroy" lazy-init="true">
        <constructor-arg name="filePath"  value="#{jobParameters['input.file.path']}"></constructor-arg>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
    </bean>	
    <bean id="customPayTempOvertimeUploadItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="payTempOvertimeService" />
        <property name="targetMethod" value="executeBatchFileUpload" />
    </bean>
	
	
		
    <!-- reader, processor and writer for pay_employee_calculation -->
    <bean id="customPayEmployeeCalculationItemReader" class="com.inkubator.hrm.batch.PayEmployeeCalculationReader" scope="step" lazy-init="true">
        <constructor-arg name="payTempKalkulasiService" ref="payTempKalkulasiService"/>
        <constructor-arg name="startPeriodDate" value="#{jobParameters['startPeriodDate']}"/>
        <constructor-arg name="endPeriodDate" value="#{jobParameters['endPeriodDate']}"/>
        <constructor-arg name="createdOn" value="#{jobParameters['createdOn']}"/>
        <constructor-arg name="createdBy" value="#{jobParameters['createdBy']}"/>
    </bean>	
    <bean id="customTaxEmployeeCalculationItemReader" class="com.inkubator.hrm.batch.TaxEmployeeCalculationReader" scope="step" lazy-init="true">
        <constructor-arg name="empDataService" ref="empDataService"/>
        <constructor-arg name="endPeriodDate" value="#{jobParameters['endPeriodDate']}"/>
        <property name="payTempKalkulasiService" ref="payTempKalkulasiService"/>
    </bean>
    <bean id="customFinalEmployeeCalculationItemReader" class="com.inkubator.hrm.batch.FinalEmployeeCalculationReader" scope="step" lazy-init="true">
        <constructor-arg name="empDataService" ref="empDataService"/>
        <constructor-arg name="endPeriodDate" value="#{jobParameters['endPeriodDate']}"/>
    </bean>
    <bean id="customTaxEmployeeCalculationItemProcessor" class="com.inkubator.hrm.batch.TaxEmployeeCalculationProcessor" scope="step" lazy-init="true">		
        <constructor-arg name="taxRateService" ref="taxRateService"/>
        <property name="createdOn" value="#{jobParameters['createdOn']}"/>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
    </bean>	
    <bean id="customPayEmployeeCalculationItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into pay_temp_kalkulasi(id,pay_salary_component_id,emp_data_id,nominal,factor,detail,created_on,created_by,version) values (:id,:paySalaryComponent.id,:empData.id,:nominal,:factor,:detail,:createdOn,:createdBy,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    <bean id="customTaxEmployeeCalculationItemWriter" class="com.inkubator.hrm.batch.TaxEmployeeCalculationWriter" lazy-init="true">
        <property name="dataSource" ref="c3p0DataSource-1" />
        <property name="sql">
            <value>
            <![CDATA[        
            	insert into pay_temp_kalkulasi_emp_pajak(id,tax_component_id,emp_data_id,nominal,created_on,created_by,version) values (:id,:taxComponent.id,:empData.id,:nominal,:createdOn,:createdBy,0)
            ]]>
            </value>
        </property>
        <!-- It will take care matching between object property and sql name parameter -->
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
    </bean>
    <bean id="customFinalEmployeeCalculationItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="payTempKalkulasiService" />
        <property name="targetMethod" value="executeBatchFinalSalaryCalculation" />
    </bean>	
    
    
    
    <!-- reader and writer for loan_upload -->	
    <bean id="customLoanUploadItemReader" class="com.inkubator.hrm.batch.LoanUploadReader" scope="step" destroy-method="destroy" lazy-init="true">
        <constructor-arg name="filePath"  value="#{jobParameters['input.file.path']}"></constructor-arg>
        <property name="createdBy" value="#{jobParameters['createdBy']}"/>
        <property name="loanSchemeId" value="#{jobParameters['loanSchemeId']}"/>
    </bean>	
    <bean id="customLoanUploadItemWriter" class="org.springframework.batch.item.adapter.ItemWriterAdapter" lazy-init="true">
        <property name="targetObject" ref="loanService" />
        <property name="targetMethod" value="executeBatchFileUpload" />
    </bean>
</beans>
